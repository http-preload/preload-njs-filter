// This file is generated by Rollup, need to replace `export {xxx as default}` to `export default xxx` manually

import fs from 'fs';

function SimpleMap() {
  this.data = Object.create(null);
}
SimpleMap.prototype.get = function(k) {
  return this.data[k];
};
SimpleMap.prototype.set = function(k, v) {
  this.data[k] = v;
  return this;
};
SimpleMap.prototype.has = function(k) {
  return k in this.data;
};
SimpleMap.prototype.delete = function(k) {
  return delete this.data[k];
};
SimpleMap.prototype.clear = function(k) {
  let data = this.data;
  for (let k in data) {
    delete data[k];
  }
};
SimpleMap.prototype.forEach = function(fn, context) {
  let data = this.data;
  for (let k in data) {
    let v = data[k];
    fn.call(context, v, k);
  }
};
Object.defineProperty(SimpleMap.prototype, 'size', {
  enumerable: false,
  configurable: true,
  get: function() {
    let len = 0;
    let data = this.data;
    for (let _ in data) {
      len += 1;
    }
    return len;
  },
});

/**
 * Get ponyfilled user agent data by header 'User-Agent'
 * @param {string} userAgent
 * @returns {Object} like Client Hints `navigator.userAgentData`
 */
function getUserAgentData$1(userAgent) {
  let mobile, platform = '', brands = [];
  let fullVersionList = [];
  let platformInfo = userAgent;
  let found = false;
  let versionInfo = userAgent.replace(/\(([^)]+)\)?/g, ($0, $1) => {
    if (!found) {
      platformInfo = $1;
      found = true;
    }
    return '';
  });
  // detect mobile
  mobile = userAgent.indexOf('Mobile') !== -1;
  let m;
  let m2;
  // detect platform
  if ((m = /Windows NT (\d+(\.\d+)*)/.exec(platformInfo)) !== null) {
    platform = 'Windows';
  } else if ((m = /Android (\d+(\.\d+)*)/.exec(platformInfo)) !== null) {
    platform = 'Android';
  } else if ((m = /(iPhone|iPod touch); CPU iPhone OS (\d+(_\d+)*)/.exec(platformInfo)) !== null) {
    // see special notes at https://www.whatismybrowser.com/guides/the-latest-user-agent/safari
    platform = 'iOS';
  } else if ((m = /(iPad); CPU OS (\d+(_\d+)*)/.exec(platformInfo)) !== null) {
    platform = 'iOS';
  } else if ((m = /Macintosh; (Intel|\w+) Mac OS X (\d+(_\d+)*)/.exec(platformInfo)) !== null) {
    platform = 'macOS';
  } else if ((m = /Linux/.exec(platformInfo)) !== null) {
    platform = 'Linux';
  } else if ((m = /CrOS (\w+) (\d+(\.\d+)*)/.exec(platformInfo)) !== null) {
    platform = 'Chrome OS';
  } else {
    platform = 'Unknown';
  }
  // detect fullVersionList / brands
  fullVersionList.push({brand: '.Not;A)Brand', version: '99.0.0.0'});
  if ((m = /Chrome\/(\d+(\.\d+)*)/.exec(versionInfo)) !== null) {
    if ((m2 = /(Edge?)\/(\d+(\.\d+)*)/.exec(versionInfo)) !== null) {
      if (parseInt(m[2]) >= 79) {
        fullVersionList.push({brand: 'Chromium', version: m[2]});
      }
      fullVersionList.push({brand: 'Microsoft Edge', version: m2[2]});
    } else {
      fullVersionList.push({brand: 'Chromium', version: m[1]});
      fullVersionList.push({brand: 'Google Chrome', version: m[1]});
    }
  } else if ((m = /AppleWebKit\/(\d+(\.\d+)*)/.exec(versionInfo)) !== null) {
    if (platform === 'iOS') {
      if ((m2 = /(Version)\/(\d+(\.\d+)*)/.exec(versionInfo)) != null) {
        fullVersionList.push({brand: 'Safari', version: m2[2]});
        fullVersionList.push({brand: 'Apple Safari', version: m2[1]});
      }
      if ((m2 = /(CriOS|EdgiOS|FxiOS)\/(\d+(\.\d+)*)/.exec(versionInfo)) != null) {
        // TODO detect safari version
        let identBrandMap = {
          'CriOS': 'Google Chrome',
          'EdgiOS': 'Microsoft Edge',
          'FxiOS': 'Mozilla Firefox'
        };
        let brand = identBrandMap[m2[1]];
        fullVersionList.push({brand, version: m2[2]});
      }
    } else if ((m2 = /(Version)\/(\d+(\.\d+)*)/.exec(versionInfo)) != null) {
      fullVersionList.push({brand: 'Safari', version: m2[2]});
      fullVersionList.push({brand: 'Apple Safari', version: m2[1]});
    }
  } else if ((m = /Firefox\/(\d+(\.\d+)*)/.exec(versionInfo)) !== null) {
    fullVersionList.push({brand: 'Firefox', version: m[1]});
    fullVersionList.push({brand: 'Mozilla Firefox', version: m[1]});
  } else if ((m = /(MSIE |rv:)(\d+\.\d+)/.exec(platformInfo)) !== null) {
    fullVersionList.push({brand: 'Internet Explorer', version: m[2]});
  }
  brands = fullVersionList.map((b) => {
    let pos = b.version.indexOf('.');
    let version = pos === -1 ? b.version : b.version.slice(0, pos);
    return {brand: b.brand, version};
  });
  return {mobile, platform, brands};
}
/**
 * Get ponyfilled user agent data by header 'Sec-CH-UA', 'Sec-CH-UA-Mobile' and 'Sec-CH-UA-Platform'
 * @param {string} uaBrands
 * @param {string} uaMobile
 * @param {string} uaPlatform
 * @returns {Object}
 */
function getUserAgentDataByClientHints$1(uaBrands, uaMobile, uaPlatform) {
  let mobile = uaMobile === '?1';
  let platform = uaPlatform ? uaPlatform.slice(1, -1) : 'Unknown';
  let brands = [];
  (uaBrands || '').replace(/"([^"]+)";v="(\d+(\.\d+)*)"(, |$)/g, ($0, $1, $2) => {
    brands.push({brand: $1, version: $2});
    return '';
  });
  if (brands.length === 0) {
    brands.push({brand: '.Not;A)Brand', version: '99.0.0.0'});
  }
  return {mobile, platform, brands};
}

const SIMPLE_TOKEN = /[\w-]/;
function linkToHeaderValue(link) {
  let str = '<' + link.href + '>';
  for (let k in link) {
    if (k === 'href')
      continue;
    let v = link[k];
    str += ';' + k + '=' + (SIMPLE_TOKEN.test(v) ? v : '"' + v + '"');
  }
  return str;
}

function LinkHeader(links, conditionId, condition) {
  this.headerValue = links.map(linkToHeaderValue).join(', ');
  this.conditionId = conditionId;
  this.condition = condition;
}

let rFunc = /^function\s*(?:[a-zA-Z$_][\w$]*\s*)?\(([a-zA-Z$_][\w$]*(?:,?\s*[a-zA-Z$_][\w$]*)*)?\)\s*\{\s*(.*)\}$/;
let rIdentifier = /[a-zA-Z$_][\w$]*/g;
function construct(Function, args) {
  switch (args.length) {
    case 0:
      return new Function();
    case 1:
      return new Function(args[0]);
    case 2:
      return new Function(args[0], args[1]);
    case 3:
      return new Function(args[0], args[1], args[2]);
    case 4:
      return new Function(args[0], args[1], args[2], args[3]);
    default:
      throw new Error('Too many arguments for Function');
  }
}
function PreloadManifest$1(data) {
  let manifestVersion = data.manifestVersion;
  let resources = data.resources;
  let conditions = data.conditions;
  if (manifestVersion !== 1) {
    throw new Error('Cannot handle manifestVersion ' + manifestVersion);
  }
  if (!resources || typeof resources !== 'object') {
    throw new Error('Cannot handle resources');
  }
  let functions = {}; // Object.create(null) is safer but may be slower
  if (conditions) {
    Object.keys(conditions).forEach((name) => {
      let value = conditions[name];
      let expr;
      if (value.startsWith('function')) {
        let arr = rFunc.exec(value);
        if (arr !== null) {
          let args = arr[1].match(rIdentifier) || [];
          args.push(arr[2]);
          args = ['a', 'b', 'return a+b;'];
          expr = construct(Function, args);
        }
      }
      if (typeof expr === 'function') {
        functions[name] = expr;
      } else {
        throw new Error(`Value of conditions[${JSON.stringify(name)}] must be a function expression`);
      }
    });
  }
  this.functions = functions;
  let map = new SimpleMap();
  let ensureGroup = (key) => {
    let group = map.get(key);
    if (!group) {
      group = [];
      map.set(key, group);
    }
    return group;
  };
  Object.keys(resources).forEach((key) => {
    let links = resources[key];
    let entry = key.match(/\S+/g);
    if (!entry) {
      // NOOP
    } else if (entry.length === 1) {
      let resPath = key;
      let conditionId = null;
      let condition = null;
      ensureGroup(resPath).push(new LinkHeader(links, conditionId, condition));
    } else if (entry.length === 2) {
      let resPath = entry[0];
      let conditionId = entry[1];
      let condition = functions[conditionId];
      if (!condition) {
        throw new ReferenceError(`Preload condition "${conditionId}" is not defined, referenced by URI path ${resPath}`);
      }
      ensureGroup(resPath).push(new LinkHeader(links, conditionId, condition));
    } else {
      throw new SyntaxError('Invalid resources key: ' + key);
    }
  });
  this.map = map;
}
PreloadManifest$1.prototype.lookup = function (reqPath) {
  return this.map.get(reqPath);
};
PreloadManifest$1.prototype.supportsEarlyHints = function (userAgentData, headers) {
  return userAgentData.brands.some((e) => (e.brand === 'Chromium' && parseInt(e.version) >= 103));
};

var shared = {
  PreloadManifest: PreloadManifest$1,
  getUserAgentData: getUserAgentData$1,
  getUserAgentDataByClientHints: getUserAgentDataByClientHints$1
};

const PreloadManifest = shared.PreloadManifest;
const getUserAgentData = shared.getUserAgentData;
const getUserAgentDataByClientHints = shared.getUserAgentDataByClientHints;

function getRequestHeaders(r) {
  let brief = false;
  let msg = '';
  let method = r.method;
  let path = r.variables.request_uri;
  let scheme = r.variables.scheme;
  if (parseFloat(r.httpVersion) < 2) {
    let authority = r.headers.host;
    if (brief) {
      msg = method + ' ' + scheme + '://' + authority + path + ' ' + r.variables.server_protocol;
    } else {
      msg = method + ' ' + path + ' ' + r.variables.server_protocol + '\n';
      let rawHeaders = r.rawHeadersIn;
      for (let i = 0, e; i < rawHeaders.length; i += 1) {
        e = rawHeaders[i];
        msg += e[0] + ': ' + e[1] + '\n';
      }
    }
  } else {
    let authority = r.headers.host || r.variables.server_name + ':' + r.variables.server_protocol;
    if (brief) {
      msg = method + ' ' + scheme + '://' + authority + path + ' ' + r.variables.server_protocol;
    } else {
      msg += ':method: ' + method + '\n';
      msg += ':path: ' + path + '\n';
      msg += ':scheme: ' + scheme + '\n';
      msg += ':authority: ' + authority + '\n';
      let rawHeaders = r.rawHeadersIn;
      for (let i = 0, e; i < rawHeaders.length; i += 1) {
        e = rawHeaders[i];
        msg += e[0] + ': ' + e[1] + '\n';
      }
    }
  }
  return msg;
}

/**
 * @class ConditionArgsSupplier
 * @constructor
 * @param {HTTPRequest} r
 */
function ConditionArgsSupplier(r) {
  let value;
  /**
   * @method get
   * @returns {Object}
   */
  this.get = () => {
    if (value === undefined) {
      let headers = r.headersIn;
      let userAgentData;
      let uaBrands = headers['sec-ch-ua'];
      let userAgent;
      if (uaBrands !== undefined) {
        userAgentData = getUserAgentDataByClientHints(uaBrands, headers['sec-ch-ua-mobile'], headers['sec-ch-ua-platform']);
      } else {
        userAgent = headers['user-agent'];
        userAgentData = getUserAgentData(userAgent);
      }
      // let psuedoHeaders;
      // let variables = r.variables;
      // if (r.httpVersion < 2) {
      //   psuedoHeaders = {
      //     ':method': r.method,
      //     ':path': variables.request_uri,
      //     ':scheme': variables.scheme,
      //     ':authority': headers['host'],
      //     ':protocol': 'http/' + r.httpVersion
      //   };
      // } else {
      //   psuedoHeaders = {
      //     ':method': r.method,
      //     ':path': variables.request_uri,
      //     ':scheme': variables.scheme,
      //     ':authority': headers['host'] || variables.server_name + ':' + variables.server_protocol,
      //     ':protocol': r.httpVersion === '2.0' ? 'h2' : 'h3'
      //   };
      // }
      value = [userAgentData, headers];
    }
    return value;
  };
}

let initialized = false;
let settings;
let manifest;
function init(options) {
  settings = Object.assign({
    manifestFile: null,
    index: 'index.html',
  }, options);
  let manifestFile = settings.manifestFile;
  if (!manifestFile) {
    throw new Error('options manifestFile must be specified');
  }
  manifest = new PreloadManifest(JSON.parse(fs.readFileSync(manifestFile, {encoding: 'utf8'})));
}
// init(preloadOptions);

function getLinkHeaderValue(r) {
  if ((r.headersIn['accept'] || '').startsWith('text/html') && r.method === 'GET') {
    let reqPath = r.uri;
    if (reqPath.endsWith('/')) {
      reqPath += settings.index;
    }
    let candicates =  manifest.lookup(reqPath);
    if (candicates && candicates.length > 0) {
      let argsSupplier = new ConditionArgsSupplier(r);
      let headerValue = [];
      candicates.forEach((candidate) => {
        if (!candidate.condition || candidate.condition.apply(undefined, argsSupplier.get())) {
          headerValue.push(candidate.headerValue);
        }
      });
      if (headerValue.length > 0)
        return headerValue.join(', ');
    }
  }
  return '';
}
function setHeaders(r) {
  if (!initialized) { // not initialized
    initialized = true;
    let options;
    try {
      options = JSON.parse(r.variables.preload_options);
    } catch (e) {
      r.error(e);
      return;
    }
    try {
      init(options);
    } catch (e) {
      r.error(e);
      return;
    }
  } else if (!manifest) { // initialization failed
    return;
  }
  let headerValue = getLinkHeaderValue(r);
  if (headerValue.length > 0) {
    r.headersOut['Link'] = headerValue;
  }
}

var preload = {setHeaders, getRequestHeaders};

export default preload;
